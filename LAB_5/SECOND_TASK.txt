CREATE TABLE HISTORY(
HISTORY_ID NUMBER GENERATED ALWAYS AS IDENTITY,
NEW_PASSPORT_ID NUMBER,
OLD_PASSPORT_ID NUMBER,
SERIES VARCHAR2(5),
NUM VARCHAR2(20),
ISSUE_DATA DATE,
NEW_GROUP_ID NUMBER,
OLD_GROUP_ID NUMBER,
NAME VARCHAR2(50),
C_VAL NUMBER,
NEW_STUDENT_ID NUMBER,
OLD_STUDENT_ID NUMBER,
STUDENT_GROUP_ID NUMBER,
STUDENT_PASSPORT_ID NUMBER,
OPERATION VARCHAR2(6) NOT NULL CHECK(OPERATION IN ('insert', 'update', 'delete')),
OP_DATE DATE NOT NULL,
CONSTRAINT HISTORY_PK PRIMARY KEY(HISTORY_ID)
);

CREATE OR REPLACE TRIGGER save_passport_history_trigger
AFTER INSERT OR UPDATE OR delete
ON PASSPORT
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO HISTORY(NEW_PASSPORT_ID, SERIES, NUM, ISSUE_DATA, OPERATION, OP_DATE)
        VALUES(:NEW.PASSPORT_ID, :NEW.SERIES, :NEW.NUM, :NEW.ISSUE_DATA, 'insert', SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO HISTORY(OLD_PASSPORT_ID, NEW_PASSPORT_ID, SERIES, NUM, ISSUE_DATA, OPERATION, OP_DATE)
        VALUES(:OLD.PASSPORT_ID, :NEW.PASSPORT_ID, :OLD.SERIES, :OLD.NUM, :OLD.ISSUE_DATA, 'update', SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO HISTORY(OLD_PASSPORT_ID, SERIES, NUM, ISSUE_DATA, OPERATION, OP_DATE)
        VALUES(:OLD.PASSPORT_ID, :OLD.SERIES, :OLD.NUM, :OLD.ISSUE_DATA, 'delete', SYSDATE);
    END IF;
END save_passport_history_trigger;


CREATE OR REPLACE TRIGGER save_groups_history_trigger
AFTER INSERT OR UPDATE OR delete
ON GROUPS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO HISTORY(NEW_GROUP_ID, NAME, C_VAL, OPERATION, OP_DATE)
        VALUES(:NEW.GROUP_ID, :NEW.NAME, :NEW.C_VAL, 'insert', SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO HISTORY(OLD_GROUP_ID, NEW_GROUP_ID, NAME, C_VAL, OPERATION, OP_DATE)
        VALUES(:OLD.GROUP_ID, :NEW.GROUP_ID, :OLD.NAME, :OLD.C_VAL, 'update', SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO HISTORY(OLD_GROUP_ID, NAME, C_VAL, OPERATION, OP_DATE)
        VALUES(:OLD.GROUP_ID, :OLD.NAME, :OLD.C_VAL, 'delete', SYSDATE);
    END IF;
END save_groups_history_trigger;


CREATE OR REPLACE TRIGGER save_students_history_trigger
AFTER INSERT OR UPDATE OR delete
ON STUDENTS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO HISTORY(NEW_STUDENT_ID, NAME, STUDENT_GROUP_ID, STUDENT_PASSPORT_ID, OPERATION, OP_DATE)
        VALUES(:NEW.STUDENT_ID, :NEW.NAME, :NEW.GROUP_ID, :NEW.PASSPORT_ID, 'insert', SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO HISTORY(OLD_STUDENT_ID, NEW_STUDENT_ID, NAME, STUDENT_GROUP_ID, STUDENT_PASSPORT_ID, OPERATION, OP_DATE)
        VALUES(:OLD.STUDENT_ID, :NEW.STUDENT_ID, :OLD.NAME, :OLD.GROUP_ID, :OLD.PASSPORT_ID, 'update', SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO HISTORY(OLD_STUDENT_ID, NAME, STUDENT_GROUP_ID, STUDENT_PASSPORT_ID, OPERATION, OP_DATE)
        VALUES(:OLD.STUDENT_ID, :OLD.NAME, :OLD.GROUP_ID, :OLD.PASSPORT_ID, 'delete', SYSDATE);
    END IF;
END save_students_history_trigger;
